-- 숫자 함수 : 수학적 계산식을 처리하기 위한 함수를 의미
-- DUAL 테이블 : SYS 계정에서 제공하는 테이블, 함수나 계산식을 테이블 참조 없이 실행할 수 있도록 제공
-- ABS : 절대값을 구함
SELECT -10, ABS(-10) FROM DUAL;

-- ROUND : 반올림한 결과를 반환, 반올림할 위치를 지정할 수 있으며 지정하지 않으면, 0으로 지정한 위치에서 반올림
SELECT ROUND(1234.5678) AS ROUND, -- 위치를 지정하지 않으면 0의 위치(소수점 첫번째 자리를 반올림)
	ROUND(1234.5678, 0) AS ROUND_0,
	ROUND(1234.5678, 1) AS ROUND_1,
	ROUND(1234.5678, 2) AS ROUND_2,
	ROUND(1234.5678, -1) AS ROUND_MINUS1,
	ROUND(1234.5678, -2) AS ROUND_MINUS2
FROM DUAL;

-- TRUNC : 버림을 한 결과를 반환하는 함수
SELECT TRUNC(1234.5678) AS TRUNC,
     TRUNC(1234.5678, 0) AS TRUNC_0,
     TRUNC(1234.5678, 1) AS TRUNC_1,
     TRUNC(1234.5678, 2) AS TRUNC_2,
     TRUNC(1234.5678, -1) AS TRUNC_MINUS1,
     TRUNC(1234.5678, -2) AS TRUNC_MINUS2
 FROM DUAL;

-- MOD : 나누기한 후 나머지를 출력하는 함수
SELECT MOD(21, 5) FROM DUAL;

-- CEIL : 소수점 이하가 있으면 무조건 올림
SELECT CEIL(12.345) FROM DUAL;

-- FLOOR : 소수점 이하를 무조건 버림
SELECT FLOOR(12.345) FROM DUAL;

-- POWER : 정수A를 정수B만큼 제곱하는 함수
SELECT POWER(3,4) FROM DUAL;

-- 문자 함수 : 문자 데이터를 가공하거나 문자 데이터로 부터 특정 결과를 얻고자 할 때 사용
-- UPPER() : 모두 대문자, LOWER() : 모두 소문자 INITCAP() : 첫번째 문자만 대문자(나머지는 소문자)
SELECT ENAME, UPPER(ENAME), LOWER(ENAME), INITCAP(ENAME)
FROM EMP;

-- 문자열 길이를 구하는 LENGTH 함수
SELECT ENAME, LENGTH(ENAME) FROM EMP;
-- 문자열 바이트 길이를 구하는 LENGTHB 함수
SELECT LENGTH('한글'), LENGTH('ENG'), LENGTHB('한글'),LENGTHB('ENG')
FROM DUAL;

-- SUBSTR(대상, 시작위치, 길이)/ SUBSTRB(대상, 시작위치) : 대상 문자열의 시작위치 부터 선택한 개수만큼 문자를 반환
-- 데이터베이스는 프로그래밍 언어와 달리 0부터 시작하는 INDEX가 아님
SELECT JOB, SUBSTR(JOB, 1, 2), SUBSTR(JOB, 3, 2),SUBSTRB(JOB, 5)
FROM EMP;

-- 음수값은 뒤에서 부터 계산 함(파이썬 문자열 인덱싱과 유사)
SELECT JOB, SUBSTR(JOB, -LENGTH(JOB)),
SUBSTR(JOB, -LENGTH(JOB),2),
SUBSTR(JOB, -3)
FROM EMP;

-- INSTR : 문자열 데이터 안에 특정 문자나 문자열이 어디에 포함되어 있는지 알아 낼 때 사용
SELECT INSTR('HELLO, ORACLE!', 'L') AS INSTR1, -- 처음 부터 검색
	INSTR('HELLO, ORACLE!', 'L', 5) AS INSTR2, -- 5번째 부터 검색 시작
	INSTR('HELLO, ORACLE!', 'L', 2, 2) AS INSTR3 -- 2번째 부터 검색하는데 해당 문자가 2번째 나타날때 찾음
FROM DUAL;

-- 특정 문자가 포함된 행 찾기
SELECT * FROM EMP
WHERE INSTR(ENAME, 'S') > 0;
-- 위랑 같음
SELECT * FROM EMP
WHERE ENAME LIKE '%S%';

-- REPLACE : 특정 문자열 데이터에 포함된 문자를 다른 문자로 대체 할 때 사용
SELECT '010-1234-5678' AS REPLACE_BEFOR,
	REPLACE('010-1234-5678', '-', ' ') AS REPLACE1,
	REPLACE('010-1234-5678', '-') AS REPLACE2
FROM DUAL;

-- LPAD / RPAD : 기준 공간 칸수를 지정하고 빈칸 만큼 특정 문자로 채우는 함수
SELECT LPAD('ORACLE', 10, '+')FROM DUAL;
SELECT RPAD('ORACLE', 10, '+')FROM DUAL;
SELECT RPAD('ORACLE', 10)FROM DUAL;

-- 개인정보 뒷자리를 *로 표시하기
SELECT RPAD('971215-', 14, '*') AS RPAD_JUMIN,
	RPAD('010-1234-', 13, '*') AS RPAD_PHONE
FROM DUAL;

-- 두 문자열을 합치는 CONCAT 함수
SELECT CONCAT(EMPNO, ENAME), CONCAT(EMPNO, CONCAT(' : ', ENAME))
FROM EMP
WHERE ENAME = 'JAMES';

-- TRIM / LTRIM / RTRIM : 문자열 데이터 내에서 특정 문자를 지우기 위해 사용
SELECT '[' || TRIM(' _Oracle_ ') || ']' AS TRIM,
 '[' || LTRIM(' _Oracle_ ') || ']' AS LTRIM,
 '[' || LTRIM('<_Oracle_>', '<_') || ']' AS LTRIM_2,
 '[' || RTRIM(' _Oracle_ ') || ']' AS RTRIM,
 '[' || RTRIM('<_Oracle_>', '_>') || ']' AS RTRIM_2
 FROM DUAL;

-- 날짜 데이터를 다루는 날짜 함수
-- SYSDATE : 운영체제로 부터 시간을 읽어 옴
SELECT SYSDATE FROM DUAL;

SELECT SYSDATE AS "현재시간",
	SYSDATE -1 AS "어제",
	SYSDATE +1 AS "내일"
FROM DUAL;

-- 몇 개월 이후 날짜를 구하는 ADD_MONTHS 함수
SELECT SYSDATE,
	ADD_MONTHS(SYSDATE, 3) -- 현재부터 3개월 이후의 날짜 구하기 
 FROM DUAL;

-- 입사 10주년이 되는 사원들 데이터 출력하기
SELECT EMPNO, ENAME, HIREDATE,
	ADD_MONTHS(HIREDATE, 120) AS "입사_10주년"
FROM EMP;

-- 연습 문제 : SYSDATE와 ADD_MONTHS함수를 사용하여 현재 날짜와 6개월 이후 날짜가 출력
SELECT SYSDATE,
	ADD_MONTHS(SYSDATE, 6)
FROM DUAL;

-- 돌아오는 요일(NEXT_DAY), 달의 마지막 날짜를 구하는 LAST_DAY
SELECT SYSDATE,
	NEXT_DAY(SYSDATE, '월요일'),
	LAST_DAY(SYSDATE)
FROM DUAL;

-- 날짜 정보 추출 함수
SELECT EXTRACT(YEAR FROM DATE '2024-03-26')
FROM DUAL;

SELECT * FROM EMP
WHERE EXTRACT(MONTH FROM HIREDATE) = 12; -- 입사 12월 사원 추출

-- 자료형을 변환하는 형 변환 함수, number와 문자 자료형 연산 시 자동으로 number타입으로 변환
SELECT EMPNO, ENAME, EMPNO + '500'
FROM EMP
WHERE ENAME = 'FORD';

-- 날짜, 숫자를 문자로 변환하는 TO_CHAR 함수
SELECT SYSDATE,
    TO_CHAR(SYSDATE, 'CC') AS 세기,
    TO_CHAR(SYSDATE, 'YY') AS 연도,
    TO_CHAR(SYSDATE, 'YYYY/MM/DD PM HH:MI:SS ') AS "년/월/일 시:분:초",
    TO_CHAR(SYSDATE, 'Q') AS 쿼터,
    TO_CHAR(SYSDATE, 'DD') AS 일,
    TO_CHAR(SYSDATE, 'DDD') AS 경과일,
    TO_CHAR(SYSDATE, 'HH') AS "12시간제",
    TO_CHAR(SYSDATE, 'HH12') AS "12시간제",
    TO_CHAR(SYSDATE, 'HH24') AS "24시간제",
    TO_CHAR(SYSDATE, 'W') AS 몇주차
FROM DUAL;

SELECT SYSDATE FROM DUAL;

-- 시간 형식 지정하여 출력
SELECT SYSDATE,
     TO_CHAR(SYSDATE, 'HH24:MI:SS') AS HH24MISS,
     TO_CHAR(SYSDATE, 'HH12:MI:SS AM') AS HHMISS_AM,
     TO_CHAR(SYSDATE, 'HH:MI:SS P.M.') AS HHMISS_PM
FROM DUAL;

-- 숫자 데이터 형식을 지정하여 출력하기
SELECT SAL,
     TO_CHAR(SAL, '$999,999') AS SAL_$,
     TO_CHAR(SAL, 'L999,999') AS SAL_L,
     TO_CHAR(SAL, '999,999.00') AS SAL_1,
     TO_CHAR(SAL, '000,999,999.00') AS SAL_2,
     TO_CHAR(SAL, '000999999.99') AS SAL_3,
     TO_CHAR(SAL, '999,999,00') AS SAL_4
FROM EMP;

SELECT '1300' - '1200' FROM DUAL; -- 자동 형변환
SELECT TO_NUMBER('1300') - '1000' FROM DUAL;

-- TO_TATE : 문자열로 명시된 날짜로 변환하는 함수
SELECT TO_DATE('22/08/20', 'YY/MM/DD')
FROM DUAL;

-- NULL 처리 함수 : NULL이란 특정 열의 행에 데이터값이 지정되지 않으면 데이터값이 NULL이 됨
-- NULL은 0이나 공백과는 다른 의미, 연산도 안되고 비교도 안됨
-- NVL : 입력한 데이터가 NULL인 경우, 두번째 매개변수 값으로 반환 됨
SELECT EMPNO, ENAME, SAL, COMM, SAL+COMM,
	NVL(COMM, 0),
	SAL + NVL(COMM, 0)
FROM EMP;

-- NVL2 : 입력 데이터가 NULL이 아니면 두번째 매개변수 값으로 반환, NULL이면 3번째 매개변수 값으로 반환
SELECT EMPNO, ENAME, COMM,
	NVL2(COMM, '0', 'X'),
	NVL2(COMM, SAL*12+COMM, SAL*12) AS "연봉"
FROM EMP;

-- NULLIF : 두 값을 비교하여 동일한지 아닌지에 대한 결과 반환, 두값이 동일하면 NULL, 아니면 첫번째 값 반환
SELECT NULLIF(10, 10), NULLIF('A', 'B') FROM dual;
